<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://nihil.cc/</id><title>Nihil</title><subtitle>Nichts Hsu 的个人博客</subtitle> <updated>2021-07-15T22:49:00+08:00</updated> <author> <name>Nichts Hsu</name> <uri>https://nihil.cc/</uri> </author><link rel="self" type="application/atom+xml" href="https://nihil.cc/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://nihil.cc/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Nichts Hsu </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Rust 中的闭包递归与 Y 组合子</title><link href="https://nihil.cc/posts/rust_closure_and_y/" rel="alternate" type="text/html" title="Rust 中的闭包递归与 Y 组合子" /><published>2021-06-07T23:45:52+08:00</published> <updated>2021-07-05T12:04:39+08:00</updated> <id>https://nihil.cc/posts/rust_closure_and_y/</id> <content src="https://nihil.cc/posts/rust_closure_and_y/" /> <author> <name>Nichts Hsu</name> </author> <category term="杂记" /> <category term="Rust" /> <summary> λ 函数递归 λ 函数也即匿名函数，在 Rust 中体现为闭包。在一些语言中，你可以简单地在 λ 函数内调用自己实现递归，例如在 JavaScript 中实现一个阶乘： fact = n =&amp;gt; { if (n == 0) return 1; else return n * fact(n - 1); } console.log(fact(5)) // 输出120 但是当你想在 Rust 中复现这一操作时： let fact = |n| match n { 0 =&amp;gt; 1, _ =&amp;gt; n * fact(n - 1), }; println!("{}", fact(5)); 你只会得到编译器报错： _ =&amp;gt; n * fact(n - 1), ^^^^ not found in this scope ... </summary> </entry> <entry><title>Rust 中函数与闭包与 Fn Traits 探讨</title><link href="https://nihil.cc/posts/rust_fn_traits/" rel="alternate" type="text/html" title="Rust 中函数与闭包与 Fn Traits 探讨" /><published>2021-04-24T20:31:52+08:00</published> <updated>2021-04-24T20:31:52+08:00</updated> <id>https://nihil.cc/posts/rust_fn_traits/</id> <content src="https://nihil.cc/posts/rust_fn_traits/" /> <author> <name>Nichts Hsu</name> </author> <category term="杂记" /> <category term="Rust" /> <summary> 闭包 闭包，或者又名匿名函数，lambda 函数，它在官方文档中被定义为可以捕获环境的匿名函数。通常，闭包的定义具有以下的形式： let closure_name = |arg1: type1, arg2: type2| -&amp;gt; return_type { // closure body } 在闭包定义中，可以省略参数的类型和返回值类型，Rust 将通过第一次调用该闭包时的参数类型来决定闭包的参数类型以及返回值类型，甚至，如果闭包体只有一句代码时，可以省略花括号不写： let just_print = |num| println!("{}", num); just_print(12); 闭包同时有一个函数无法做到的功能：捕获上下文变量。举个例子： let delta = 5; let add_delta = |num| num + delta; print... </summary> </entry> <entry><title>我的 Chrome 上安装的插件一览及介绍</title><link href="https://nihil.cc/posts/chrome_extensions/" rel="alternate" type="text/html" title="我的 Chrome 上安装的插件一览及介绍" /><published>2021-04-20T23:08:01+08:00</published> <updated>2021-04-20T23:08:01+08:00</updated> <id>https://nihil.cc/posts/chrome_extensions/</id> <content src="https://nihil.cc/posts/chrome_extensions/" /> <author> <name>Nichts Hsu</name> </author> <category term="推荐" /> <category term="Chrome" /> <summary> 想必不管是谁，在网上冲浪这么多年，多多少少都有听说过 Chrome 浏览器，即使没有用过 Chrome，也至少用过基于 Chromium 内核的浏览器，例如：QQ 浏览器，360 浏览器，以及已经叛变的 Microsoft Edge。 很多人都知道 Chrome 很好用，但是，我想说的是：带插件的 Chrome 更好用。用 Chrome 不装插件，简直就是开空调不关窗。 下面介绍一下我自己的 Chrome 上安装的插件。 Adblock Plus 广告拦截器。没什么好说的，基本上属于必装插件，有了它，你才能看得下去国内那些充斥着广告的网站。除了默认屏蔽规则外，你也可以手动添加屏蔽规则来拦截一些你不想看到的内容。 同类型的常用插件还有：uBlock, AdGuard. Chrono Chrome 的下载管理器，取代原本的 Chrome 下载界面： 如果是原本就用外部... </summary> </entry> <entry><title>Markdown 一些奇技淫巧</title><link href="https://nihil.cc/posts/markdown/" rel="alternate" type="text/html" title="Markdown 一些奇技淫巧" /><published>2021-04-15T22:00:31+08:00</published> <updated>2021-04-20T21:50:00+08:00</updated> <id>https://nihil.cc/posts/markdown/</id> <content src="https://nihil.cc/posts/markdown/" /> <author> <name>Nichts Hsu</name> </author> <category term="教程" /> <category term="Markdown" /> <summary> 列表内分段 举个例子，假如我们想要在列表中换行，最简单的办法就是双空格法： * 第一项第一行 &amp;lt;!-- 注意这里有两个空格 --&amp;gt; 第一项第二行 * 第二项第一行 &amp;lt;!-- 注意这里有两个空格 --&amp;gt; ``` 一段代码 ``` &amp;lt;!-- 注意这里有两个空格 --&amp;gt; 第二项第二行 效果： 第一项第一行 第一项第二行 第二项第一行 一段代码 第二项第二行 但是这种做法有点太暴力了，我更倾向于使用下面的方法： * 第一项第一行 第一项第二行 * 第二项第一行 ``` 一段代码 ``` 第二项第二行 效果： 第一项第一行 第一项第二行 第二项第一行 一段代码 第二项第二行 M... </summary> </entry> <entry><title>使用 Valine 替换 Chirpy 主题中的 Disqus 评论系统</title><link href="https://nihil.cc/posts/use_valine/" rel="alternate" type="text/html" title="使用 Valine 替换 Chirpy 主题中的 Disqus 评论系统" /><published>2021-03-21T00:21:08+08:00</published> <updated>2021-06-07T23:45:27+08:00</updated> <id>https://nihil.cc/posts/use_valine/</id> <content src="https://nihil.cc/posts/use_valine/" /> <author> <name>Nichts Hsu</name> </author> <category term="教程" /> <category term="网站" /> <summary> 前置工作 根据 Valine 官方教程注册 LeanCloud 以获取 APP ID 和 APP Key。注：注册国内版 LeanCloud 需要绑定已备案的域名，而注册国际版 LeanCloud 则不需要。 如果是 fork 主题搭建博客，修改对应文件即可。如果是使用 theme 或者 remote_theme，则需要下载对应的文件放在相应目录后再修改。 配置 _config.yml 找到 disqus 数据段并删除： disqus: comments: false shortname: '' 增加 valine 的数据段： valine: comments: true # 是否启用valine leancloud_appid: # 填入你的APP ID leancloud_appkey: ... </summary> </entry> </feed>
